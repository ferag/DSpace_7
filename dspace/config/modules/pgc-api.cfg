#---------------------------------------------------------------#
#---------------------pgc-api CONFIGURATIONS------------------------#
#---------------------------------------------------------------#
# These configs are used by the pgc-api module               #
#---------------------------------------------------------------#

# Whether or not to enable the PGC-API module
# When "true", the pgc-api module is accessible on ${pgc-api.path}
# When "false" or commented out, pgc-api is disabled/inaccessible.
# (Requires reboot of servlet container, e.g. Tomcat, to reload)
pgc-api.enabled = true

# Path where pgc-api module is available
# Defaults to "pgc-api", which means the PGC-API module would be available
# at ${dspace.server.url}/pgc-api/
# (Requires reboot of servlet container, e.g. Tomcat, to reload)
pgc-api.path = pgc-api

# Storage: solr | database (solr is recommended)
pgc-api.storage=solr

# The base URL of the pgc-api webapp .
# Note: Comment out if you want to fallback to the request's URL.
pgc-api.url = ${dspace.server.url}/${pgc-api.path}

# Base solr index
pgc-api.solr.url=${solr.server}/${solr.multicorePrefix}pgc-api



# pgc-api endpoint scope configurations
# are used by the services of module pgc-api, in order to search in discovery index based on the url request
# Each search path enabled on "pgc-api" service, should be mapped with its scope to drive discovery lookup.
# i.e. for /pgc-api/research-outputs should be provided pgc-api.research-outputs.id containing id of community
# where this search should be performed (in this case "Directorio de Produccion Cientifica".
# the ids are unchangeable from the first generation
# pgc-api.global.id will be filled with the id of “Directorio” community
pgc-api.global.id =
# pgc-api.research-outputs.id will be filled with the id of “Directorio de Producción Científica” community
pgc-api.research-outputs.id =
# pgc-api.publications.id will be filled with the id of “Publication” collection of
# "Directorio de Producción Científica" community
pgc-api.publications.id =
# pgc-api.patents.id will be filled with the id of “Patents” collection of
# "Directorio de Producción Científica" community
pgc-api.patents.id =
# pgc-api.human-resources.id will be filled with the id of "Directorio de Talento Humano" community
pgc-api.human-resources.id =
# pgc-api.people.id will be filled with the id of “People” collection of
# "Directorio de Talento Humano" community
pgc-api.people.id =
# pgc-api.institutions.id will be filled with the id of "Directorio de instituciones" community
pgc-api.institutions.id =
# pgc-api.orgunits.id will be filled with the id of “OrgUnits” collection of
# "Directorio de instituciones" community
pgc-api.orgunits.id =
# pgc-api.projects-fundings.id will be filled with the id of “Directorio de Proyectos” community
pgc-api.projects-fundings.id =
# pgc-api.fundings.id will be filled with the id of “Funding” collection
# of “Directorio de Proyectos” community
pgc-api.fundings.id =
# pgc-api.projects.id will be filled with the id of “Project” collection
# of “Directorio de Proyectos” community
pgc-api.projects.id =
# pgc-api.infrastructures.id will be filled with the id of "Directorio de Infraestructuras" community
pgc-api.infrastructures.id =
# pgc-api.equipments.id will be filled with the id of “Equipment” collection of
# "Directorio de Infraestructuras" community
pgc-api.equipments.id =
# id of "Profiles" collection in "CTIVItae" community
pgc-api.ctivitae.id =


# endpoint scope configurations
# are used by the services of module pgc-api, in order to search of discovery index based on the url request
# are mandatory in order to complete a consistent search in solr
# pgc-api.publications.inverseRelation will be filled with RELATION.CvPerson.researchoutputs
pgc-api.publications.inverseRelation = RELATION.CvPerson.researchoutputs
# pgc-api.projects.inverseRelation will be filled with RELATION.CvPerson.projects
pgc-api.projects.inverseRelation = RELATION.CvPerson.projects
# pgc-api.patents.inverseRelation will be filled with RELATION.CvPerson.patents
pgc-api.patents.inverseRelation = RELATION.CvPerson.patents
# pgc-api.equipments.inverseRelation  will be filled with RELATION.CvPerson.equipments
pgc-api.equipments.inverseRelation = RELATION.CvPerson.equipments
# are used to convert the string of oai results to xml
# pgc-api.xsl will be filled with the path of the xsl file of xml conversion
pgc-api.xsl = cerif.xsl

#scope names configurations
public-scope= pgc-public
restricted-scope= pgc-restricted

# node names for scopes
#only for test is openaire but it can be changed latter
#are used to specify the name of node xml to be rendered based on the value scope of token
# are mandatory in order to complete a consistent rendering of xml
pgc-restricted= cerif.pgc-openaire-restricted
pgc-public= cerif.pgc-openaire

pgc-version = ${project.version}
